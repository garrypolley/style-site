/* ------------------------------------------------------------------------- *\
    Combines all styles needed to make the application look correct.

    1. SiteContainer ... Contains widths for size at various viewports.

\* ------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------- *\
   Custom grid system for managing responsive layouts.

   This system is heavily based on the breaks that twitter bootstrap version
   3.x uses as well as this article:
   http://www.sitepoint.com/understanding-css-grid-systems/

   The system uses a "mobile" first approach. See MediaQuery section for
   more details. This grid system _only_ supplies grids. It does not add
   any padding or margin whatsoever. This is left to the consumer to decide
   how to apply margin and padding. Padding can be easily added to the grid.
   Margin cannot be added to the grid, by philosophy it is not supported.

   1. ColumnGenerators ..... mixins that create the "meat" of the grid
   2. MediaQuery       ..... generates the actual grid CSS
   3. GridLayout       ..... classes for actually using the grid
   4. RTLSupport       ..... supplies the float of left or right to grid

\* ------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------- *\
   #ColumnGenerators

    There are two main mixins here.

    .make-responsive-columns -- Should be used when the columns need to be
        responsive.
        (e.g. .make-responsive-columns('md', 24) inside a media query)

    .make-static-columns -- Should be used when the columns should not share
        a line.
        (e.g. .make-static-columns('sm', 24) inside the smallest media query)

    1. .column-full-width must be defined in the caller to .make-static-columns
        for the styles to be applied correctly. Ideally it will be something
        with `width: 100%`.

\* ------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------- *\
   #MediaQuery

    Uses the ColumnMixins to create the actual grid system. This grid system
    is built mobile first. Meaning the "lowest" used size propagates upward.
    For example col-sm-2 will be the size for all viewports unless a larger
    size of something like col-lg-4 is used on an element.

    0. This ensures that at a very small screen all elements go to max width
      1. This is kind of a hack so that the styles all use the same rule.
    1. Should be used for smallest phones and tiny screens
    2. Should be used for larger phone sizes and tablets
    3. Should be used for larger tablets and standard desktop
    4. Should be used for big desktops

\* ------------------------------------------------------------------------- */
@media only screen and (max-width: 550px) {
  /* [0] */
  .column-full-width,
  .column-xs-1,
  .column-xs-2,
  .column-xs-3,
  .column-xs-4,
  .column-xs-5,
  .column-xs-6,
  .column-xs-7,
  .column-xs-8,
  .column-xs-9,
  .column-xs-10,
  .column-xs-11,
  .column-xs-12,
  .column-xs-13,
  .column-xs-14,
  .column-xs-15,
  .column-xs-16,
  .column-xs-17,
  .column-xs-18,
  .column-xs-19,
  .column-xs-20,
  .column-xs-21,
  .column-xs-22,
  .column-xs-23,
  .column-xs-24,
  .column-sm-1,
  .column-sm-2,
  .column-sm-3,
  .column-sm-4,
  .column-sm-5,
  .column-sm-6,
  .column-sm-7,
  .column-sm-8,
  .column-sm-9,
  .column-sm-10,
  .column-sm-11,
  .column-sm-12,
  .column-sm-13,
  .column-sm-14,
  .column-sm-15,
  .column-sm-16,
  .column-sm-17,
  .column-sm-18,
  .column-sm-19,
  .column-sm-20,
  .column-sm-21,
  .column-sm-22,
  .column-sm-23,
  .column-sm-24,
  .column-md-1,
  .column-md-2,
  .column-md-3,
  .column-md-4,
  .column-md-5,
  .column-md-6,
  .column-md-7,
  .column-md-8,
  .column-md-9,
  .column-md-10,
  .column-md-11,
  .column-md-12,
  .column-md-13,
  .column-md-14,
  .column-md-15,
  .column-md-16,
  .column-md-17,
  .column-md-18,
  .column-md-19,
  .column-md-20,
  .column-md-21,
  .column-md-22,
  .column-md-23,
  .column-md-24,
  .column-lg-1,
  .column-lg-2,
  .column-lg-3,
  .column-lg-4,
  .column-lg-5,
  .column-lg-6,
  .column-lg-7,
  .column-lg-8,
  .column-lg-9,
  .column-lg-10,
  .column-lg-11,
  .column-lg-12,
  .column-lg-13,
  .column-lg-14,
  .column-lg-15,
  .column-lg-16,
  .column-lg-17,
  .column-lg-18,
  .column-lg-19,
  .column-lg-20,
  .column-lg-21,
  .column-lg-22,
  .column-lg-23,
  .column-lg-24 {
    width: 100%;
    /* [0.1] */
  }
}
@media only screen and (min-width: 550px) {
  /* [1] */
  .column-xs-1 {
    width: 4.16666667%;
  }
  .column-xs-2 {
    width: 8.33333333%;
  }
  .column-xs-3 {
    width: 12.5%;
  }
  .column-xs-4 {
    width: 16.66666667%;
  }
  .column-xs-5 {
    width: 20.83333333%;
  }
  .column-xs-6 {
    width: 25%;
  }
  .column-xs-7 {
    width: 29.16666667%;
  }
  .column-xs-8 {
    width: 33.33333333%;
  }
  .column-xs-9 {
    width: 37.5%;
  }
  .column-xs-10 {
    width: 41.66666667%;
  }
  .column-xs-11 {
    width: 45.83333333%;
  }
  .column-xs-12 {
    width: 50%;
  }
  .column-xs-13 {
    width: 54.16666667%;
  }
  .column-xs-14 {
    width: 58.33333333%;
  }
  .column-xs-15 {
    width: 62.5%;
  }
  .column-xs-16 {
    width: 66.66666667%;
  }
  .column-xs-17 {
    width: 70.83333333%;
  }
  .column-xs-18 {
    width: 75%;
  }
  .column-xs-19 {
    width: 79.16666667%;
  }
  .column-xs-20 {
    width: 83.33333333%;
  }
  .column-xs-21 {
    width: 87.5%;
  }
  .column-xs-22 {
    width: 91.66666667%;
  }
  .column-xs-23 {
    width: 95.83333333%;
  }
  .column-xs-24 {
    width: 100%;
  }
}
@media only screen and (min-width: 768px) {
  /* [2] */
  .column-sm-1 {
    width: 4.16666667%;
  }
  .column-sm-2 {
    width: 8.33333333%;
  }
  .column-sm-3 {
    width: 12.5%;
  }
  .column-sm-4 {
    width: 16.66666667%;
  }
  .column-sm-5 {
    width: 20.83333333%;
  }
  .column-sm-6 {
    width: 25%;
  }
  .column-sm-7 {
    width: 29.16666667%;
  }
  .column-sm-8 {
    width: 33.33333333%;
  }
  .column-sm-9 {
    width: 37.5%;
  }
  .column-sm-10 {
    width: 41.66666667%;
  }
  .column-sm-11 {
    width: 45.83333333%;
  }
  .column-sm-12 {
    width: 50%;
  }
  .column-sm-13 {
    width: 54.16666667%;
  }
  .column-sm-14 {
    width: 58.33333333%;
  }
  .column-sm-15 {
    width: 62.5%;
  }
  .column-sm-16 {
    width: 66.66666667%;
  }
  .column-sm-17 {
    width: 70.83333333%;
  }
  .column-sm-18 {
    width: 75%;
  }
  .column-sm-19 {
    width: 79.16666667%;
  }
  .column-sm-20 {
    width: 83.33333333%;
  }
  .column-sm-21 {
    width: 87.5%;
  }
  .column-sm-22 {
    width: 91.66666667%;
  }
  .column-sm-23 {
    width: 95.83333333%;
  }
  .column-sm-24 {
    width: 100%;
  }
}
@media only screen and (min-width: 992px) {
  /* [3] */
  .column-md-1 {
    width: 4.16666667%;
  }
  .column-md-2 {
    width: 8.33333333%;
  }
  .column-md-3 {
    width: 12.5%;
  }
  .column-md-4 {
    width: 16.66666667%;
  }
  .column-md-5 {
    width: 20.83333333%;
  }
  .column-md-6 {
    width: 25%;
  }
  .column-md-7 {
    width: 29.16666667%;
  }
  .column-md-8 {
    width: 33.33333333%;
  }
  .column-md-9 {
    width: 37.5%;
  }
  .column-md-10 {
    width: 41.66666667%;
  }
  .column-md-11 {
    width: 45.83333333%;
  }
  .column-md-12 {
    width: 50%;
  }
  .column-md-13 {
    width: 54.16666667%;
  }
  .column-md-14 {
    width: 58.33333333%;
  }
  .column-md-15 {
    width: 62.5%;
  }
  .column-md-16 {
    width: 66.66666667%;
  }
  .column-md-17 {
    width: 70.83333333%;
  }
  .column-md-18 {
    width: 75%;
  }
  .column-md-19 {
    width: 79.16666667%;
  }
  .column-md-20 {
    width: 83.33333333%;
  }
  .column-md-21 {
    width: 87.5%;
  }
  .column-md-22 {
    width: 91.66666667%;
  }
  .column-md-23 {
    width: 95.83333333%;
  }
  .column-md-24 {
    width: 100%;
  }
}
@media only screen and (min-width: 1200px) {
  /* [4] */
  .column-lg-1 {
    width: 4.16666667%;
  }
  .column-lg-2 {
    width: 8.33333333%;
  }
  .column-lg-3 {
    width: 12.5%;
  }
  .column-lg-4 {
    width: 16.66666667%;
  }
  .column-lg-5 {
    width: 20.83333333%;
  }
  .column-lg-6 {
    width: 25%;
  }
  .column-lg-7 {
    width: 29.16666667%;
  }
  .column-lg-8 {
    width: 33.33333333%;
  }
  .column-lg-9 {
    width: 37.5%;
  }
  .column-lg-10 {
    width: 41.66666667%;
  }
  .column-lg-11 {
    width: 45.83333333%;
  }
  .column-lg-12 {
    width: 50%;
  }
  .column-lg-13 {
    width: 54.16666667%;
  }
  .column-lg-14 {
    width: 58.33333333%;
  }
  .column-lg-15 {
    width: 62.5%;
  }
  .column-lg-16 {
    width: 66.66666667%;
  }
  .column-lg-17 {
    width: 70.83333333%;
  }
  .column-lg-18 {
    width: 75%;
  }
  .column-lg-19 {
    width: 79.16666667%;
  }
  .column-lg-20 {
    width: 83.33333333%;
  }
  .column-lg-21 {
    width: 87.5%;
  }
  .column-lg-22 {
    width: 91.66666667%;
  }
  .column-lg-23 {
    width: 95.83333333%;
  }
  .column-lg-24 {
    width: 100%;
  }
}
/* ------------------------------------------------------------------------- *\
   #GridLayout

   These styles are what "hold" the grid in place. The box-sizing allows for
   padding and margin to be contained within the given section. The content
   added in the pseudo selectors is what "clears" out the floats; in
   conjunction with the `clear: both` style.

    1. Makes the margin and padding get computed correctly within the element
    2. Ensures the row clears out...
    3. ...all the floats
    4. Allows easy positioning of elements within a column
    5. Ensures all columns take up entire row.

\* ------------------------------------------------------------------------- */
.row,
.column {
  box-sizing: border-box;
  /* [1] */
}
.row:before,
.row:after {
  content: " ";
  display: table;
  /* [2] */
}
.row:after {
  clear: both;
  /* [3] */
}
.column {
  position: relative;
  /* [4] */
}
/* ------------------------------------------------------------------------- *\
    #RTLSupport

    Right to left and left to right support is gained by using the "dir"
    attribute on the HTML. These selectors modify the responsive columns
    defined above in the GridLayout section.

    The way this is written the "column" class name becomes a reserved class
    name to use.

    Note: If a consumer wants to add margin and padding they will need to add
    the padding direction to the elements. It should be padding-left for float
    left, and padding-right for float right.

\* ------------------------------------------------------------------------- */
[dir="rtl"] .column {
  float: right;
}
[dir="ltr"] .column {
  float: left;
}
/* ------------------------------------------------------------------------- *\
    Global styles for application.

    The styles found within this file should apply to every site that
    consumes this guide. These styles should be fairly straight forward
    and deal with the basics of a web site. Anything more specific should
    live within its own file.

    1. Heading    ... Contains styles for all headings (used in typography)
    2. Typography ... Contains styles for typography (e.g. font sizes)

    Technical notes:

    * `rem` - in general `rem` units are used to keep spacing or size aligned
              for for the _entire_ site. This means that the spacing is only
              based on the `html` styles and nothing else, where as the `em`
              would get smaller and/or bigger relative to its parent
              container.
    * BEM   - The CSS found in this project uses the BEM methodology. This
              leads to more modular and scalable CSS. When using this
              project it may seem like a lot of extra CSS classes are
              needed. This is by design and makes it obvious what something
              is suppose to look like.
              (e.g. <h2 class="heading heading--extra-large">Heading</h2>)

\* ------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------- *\
    #Heading

    Typographical styles for all headings. Later in the Typography section
    specific versions of these headers will be "mixed" into the media
    queries.

    Possible headings:

    .heading--large       ... large heading
    .heading              ... basic heading (should be used for most cases)
    .heading--small       ... small heading (most useful for sub-headings)
    .heading--extra-small ... smallest heading (use sparingly)

    Note: Values for `font-size` and `line-height` are gathered from the link
    below with sensible rounded out values.

\* ------------------------------------------------------------------------- */
.heading {
  font-size: bold;
  font-size: 1.9rem;
  line-height: 2.4rem;
}
.heading--large {
  font-size: 2.4rem;
  line-height: 3rem;
}
.heading--small {
  font-size: 1.5rem;
  line-height: 1.9rem;
}
.heading--extra-small {
  font-size: 1.25rem;
  line-height: 1.7rem;
}
/* ------------------------------------------------------------------------- *\
    #Typography

    These styles assume that the Google font 'Open Sans' is being used.
    The line heights and font sizes are based heavily on the following
    articles:

    * https://ia.net/know-how/responsive-typography-the-basics
    * https://ia.net/know-how/100e2r
    * http://typecast.com/blog/a-more-modern-scale-for-web-typography
    * http://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/
    * https://css-tricks.com/rems-ems/
    * https://j.eremy.net/confused-about-rem-and-em/
    * http://goo.gl/T6GMZJ -- example look of fonts

    1. This is the base font size. All other font sizes will be relative to
        this size. This allows for better scaling and easier to read pages.
    2. Line height is computed form the font-size to make text easier to read.
        in general this value will very depending on the text to read. For
        example headings will have a smaller line height because they have
        larger font-size. While paragraphs and flow text will have larger
        line-height because they have smaller text.
        Note: `rem` is used to keep _all_ line-height consistent across the
            site.
    3. Prevent iOS and IE text size adjust after device orientation change,
        without disabling user zoom. See normalize.css
    4. Whenever the site is viewed on anything smaller than a medium sized
        screen we should increase the base font size and decrease the
        header sizes. This allows for a better viewing and reading
        experience for users.

\* ------------------------------------------------------------------------- */
html {
  font-size: 18px;
  /* [1] */
  font-family: 'Open Sans', Helvetica, 'Helvetica Neue', sans-serif;
  line-height: 1.45rem;
  /* [2] */
  -webkit-text-size-adjust: 100%;
  /* [3] */
  -ms-text-size-adjust: 100%;
  /* [3] */
}
@media only screen and (max-width: 992px) {
  /* [4] */
  html {
    font-size: 1.1rem;
    line-height: 1.6rem;
  }
  .heading {
    font-size: bold;
    font-size: 1.7rem;
    line-height: 2rem;
  }
  .heading--large {
    font-size: 1.9rem;
    line-height: 2.4rem;
  }
  .heading--small {
    font-size: 1.4rem;
    line-height: 1.8rem;
  }
  .heading--extra-small {
    font-size: 1.2rem;
    line-height: 1.7rem;
  }
}
/* ------------------------------------------------------------------------- *\
    Colors to be used throughout. No colors should exist outside this file.

    1. BaseColors      ... These are for _all_ pages e.g. <p> text color
    2. StatusColors    ... Colors for showing the status
    3. ThemeColors     ... Colors for specialized content
    4. ColorMixins     ... Mixins for using colors (consuming colors)
    5. ColorAssignment ... _Only_ place where colors are actually assigned

\* ------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------- *\
    #BaseColors

    These colors are the basis of all applications. These values should be
    fairly standard and not changed often. Ideally these values are used
    far less frequently than the better named and more semantic StatusColors
    and ThemColors.

    1. Using an 'off-black' to limit the harsh contrast of a true #fff on #000

\* ------------------------------------------------------------------------- */
/* [1] */
/* ------------------------------------------------------------------------- *\
    #StatusColors

    These colors should be used to indicate how something is doing. For
    example you may use some of these colors to show that something is
    activated or successful.

    The intent of these colors is to be used as variables within a mixin via
    using :extend(.color-mixin) that way we have less CSS rules created.
    The selector count will be the same eitherway. Since we are using a
    preprocessor we'll be able to read what the intent as well as produce
    better CSS.

    Example Usage:

        .color-background--success {
            background-color: @color-success;
        }

        .panel__heading--success {
            &.extend(.color-background--success);
        }

\* ------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------- *\
    #ThemeColors

    These colors are here for specific styles. These colors should be used
    for most things like buttons, disabled inputs, and other parts of the
    site that need common colors that do not necessarily convey meaning
    on their own like the StatusColors above.

    1. It is a coincidence that success and brand are the same values.
        These should not be set to each other, but independently set.

\* ------------------------------------------------------------------------- */
/* [1] */
/* ------------------------------------------------------------------------- *\
    #ColorAssignment

    This is the actual assignment of the default colors for the application.
    Colors should only be assigned to specific classes and elements directly
    within this code section.

\* ------------------------------------------------------------------------- */
html {
  color: #333333;
  background-color: #f2f2f2;
}
/* ------------------------------------------------------------------------- *\
    #SiteContainer

    By default the site has widths based on the given viewport once the
    viewport is above our smallest width.

    Note: this does not mean that `#site-container` _must_ be used on the
    <body> element. In fact, the #site-container is only meant to hold the
    main content of your site. That way as the site gets larger you could
    have something like a help chat session on the far right on the large
    screen size.

\* ------------------------------------------------------------------------- */
@media only screen and (max-width: 550px) {
  #site-container {
    width: auto;
  }
}
@media only screen and (min-width: 550px) {
  #site-container {
    width: 550px;
  }
}
@media only screen and (min-width: 768px) {
  #site-container {
    width: 768px;
  }
}
@media only screen and (min-width: 992px) {
  #site-container {
    width: 992px;
  }
}
@media only screen and (min-width: 1200px) {
  #site-container {
    width: 1200px;
  }
}
/*# sourceMappingURL=assets/css/app.css.map */